C51 COMPILER V9.56.0.0   MAIN                                                              12/17/2017 17:53:41 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: E:\Keil\C51\BIN\C51.EXE code\main.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listi
                    -ngs\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "gheader.h"
   2          
   3          
   4          /*
   5          *************************************************************************
   6          设计    liwei
   7          文件    main
   8          功能    全局变量定义区
   9          *************************************************************************
  10          */
  11          
  12          u32 tic_pc=0;
  13          u32 tic_01=0;
  14          
  15          
  16          
  17          
  18          /*
  19          *************************************************************************
  20          设计    liwei
  21          文件    main
  22          功能    主函数入口
  23          *************************************************************************
  24          */
  25          
  26          void main(void)
  27          {
  28   1        InitMcuReg(); 
  29   1        InitMcuPort();
  30   1        InitSysTimer();
  31   1        InitUartPort();
  32   1        Printf("\n\n\n");
  33   1        Printf("\n********************************************************");
  34   1        Printf("\nSi475x Microdigital Board - %s (%s)", __TIME__, __DATE__);
  35   1        Printf("\n********************************************************");
  36   1        Delay(1);
  37   1      
  38   1        ADC_Init();
  39   1        
  40   1        KeyInit();
  41   1      
  42   1        LCDInit();
  43   1      
  44   1        EepInit();
  45   1        EepLoadAllPar();
  46   1      
  47   1        DRV_InitialPWM();
  48   1        SetUSB1_Output(ON);
  49   1        while(1)
  50   1        {
  51   2          SysTimer();   
  52   2          CtrKeyProc();
  53   2        }
  54   1        
C51 COMPILER V9.56.0.0   MAIN                                                              12/17/2017 17:53:41 PAGE 2   

  55   1      }
  56          
  57          
  58          
  59          
  60          
  61          
  62          
  63          
  64          /*
  65          *************************************************************************
  66          设计    liwei
  67          文件    Delay
  68          功能    1ms延时
  69          *************************************************************************
  70          */
  71          
  72          void Delay(WORD  ms)                                                      
  73          {                                                                                         
  74   1        WORD i, j;                                                                             
  75   1                                                                                                
  76   1        for(i = 0; i < ms; i++)                                                           
  77   1        {  
  78   2        for(j = 0; j < 0x96; j++)                         
  79   2          {                                                                                     
  80   3              _nop_();                                                                                 
  81   3              _nop_();                                                                            
  82   3              _nop_();                                                                            
  83   3              _nop_();                                                                            
  84   3              _nop_();                                                                            
  85   3        _nop_();                                                          
  86   3              _nop_();                                                                            
  87   3        _nop_();                                                          
  88   3              _nop_();                                                                            
  89   3        _nop_();                                                          
  90   3              _nop_();                                                                            
  91   3        _nop_();                                                          
  92   3              _nop_();                                                                                           
  93   3          }                                                                                     
  94   2        }                                                                                       
  95   1      } 
  96          /*
  97          *************************************************************************
  98          设计    liwei
  99          文件    Delay
 100          功能    1ms延时
 101          *************************************************************************
 102          */
 103          
 104          void wait_us(u16 us)
 105          {
 106   1        while(us--){
 107   2              _nop_();                                                                            
 108   2              _nop_();                                                                            
 109   2         //     _nop_();                                                                            
 110   2          //    _nop_();                                                                            
 111   2        }
 112   1      }
 113          
 114          
 115          /*
 116          *************************************************************************
C51 COMPILER V9.56.0.0   MAIN                                                              12/17/2017 17:53:41 PAGE 3   

 117          设计    liwei
 118          文件    Delay
 119          功能    1ms延时
 120          *************************************************************************
 121          */
 122          
 123          void Delayms(uint16 Time)
 124          {
 125   1        tic_pc=0;
 126   1        do{;}while(tic_pc<Time);
 127   1      }
 128          
 129          #ifdef ENABLE_FLASH_MODE 
 130          
 131          
 132          SYSPAR  data SysPar;
 133          
 134          uint8 bdata ParAdjStateH;
 135          uint8 bdata ParAdjStateL;
 136          
 137          sbit sF_Bit15 = ParAdjStateH ^ 7;
 138          sbit sF_Bit14 = ParAdjStateH ^ 6;
 139          sbit sF_Bit13 = ParAdjStateH ^ 5;
 140          sbit sF_Bit12 = ParAdjStateH ^ 4;
 141          sbit sF_Bit11 = ParAdjStateH ^ 3;
 142          sbit sF_Bit10 = ParAdjStateH ^ 2;
 143          sbit sF_Bit09 = ParAdjStateH ^ 1;
 144          sbit sF_Bit08 = ParAdjStateH ^ 0;
 145          
 146          sbit sF_Bit07 = ParAdjStateL ^ 7;
 147          sbit sF_Bit06 = ParAdjStateL ^ 6;
 148          sbit sF_Bit05 = ParAdjStateL ^ 5;
 149          sbit sF_Bit04 = ParAdjStateL ^ 4;
 150          sbit sF_Bit03 = ParAdjStateL ^ 3;
 151          sbit sF_Bit02 = ParAdjStateL ^ 2;
 152          sbit sF_Bit01 = ParAdjStateL ^ 1;
 153          sbit sF_Bit00 = ParAdjStateL ^ 0;
 154          
 155          
 156          
 157          
 158          SYSPAR code DEF_SYSPAR={
 159          32,
 160          32,
 161          32,
 162          0x00,
 163          32,
 164          8,
 165          2,
 166          0,
 167          
 168          };
 169          
 170          
 171          
 172          //=====================================================================================
 173          /*
 174          1 bank = 256Bytes
 175          Flash Address Range : 0x3000 ~ 0x3EFF = 3840 Bytes
 176          Flash size : 256
 177          EEPROM BYTE : 8
 178          Group size (FlashIndex): 256 / 8 = 16
C51 COMPILER V9.56.0.0   MAIN                                                              12/17/2017 17:53:41 PAGE 4   

 179          Write Total Time : 16 * 1000 = 16K
 180          */
 181          
 182          //The WT56F216 flash last 4K can simulator EEPROM
 183          //The WT56F216 total flash is 16K Bytes 0x0000 ~ 0x3FFF
 184          //Simulator EEPROM Range :  0x3000 ~ 0x3EFF
 185          /*
 186          Using Flash function, please follow this step:
 187          1. Eeprom size = FLASH_DEFAULT_SIZE
 188          2. define flash start address = FLASH_DEFAULT_ADDRESS
 189          3. define flash size = FLASH_SIZE
 190          4. modify erase area = DRV_EraseFlash(x)
 191          */
 192          
 193          
 194          void Eep_Write(u16 Addr,u16 Num,u8 *buf)
 195          {
 196   1      
 197   1      //  wait_us(10);    
 198   1        while(Num)
 199   1        {
 200   2          
 201   2          rEER_EN1 = 0x0A;                //EEPROM enable data1: 0x0A
 202   2          rEER_EN2 = 0x05;                //EEPROM enable data2: 0x05
 203   2      
 204   2          
 205   2          rEER_ADDRL = Addr;          //set EEPROM address  
 206   2          rEER_ADDRH = (Addr>>8)&0x0f;
 207   2      
 208   2          rEER_DATA=*buf;
 209   2          
 210   2      
 211   2          rEER_TCTL = (ENABLE_PROGRAM | PROGRAM_TIMING);
 212   2      
 213   2          rEER_EN1=0x00;    //;EEPROM disable data1: 0x00
 214   2          rEER_EN2=0x00;    //EEPROM disable data2: 0x00
 215   2      
 216   2          Addr++;
 217   2          Num--;
 218   2          buf++;
 219   2          
 220   2          }
 221   1      }
 222          
 223          
 224          /*
 225          *******************************************************************************
 226          设计    liwei
 227          文件    RS_rx
 228          功能    
 229          
 230          //=========================================================
 231          //This ReadFlashData routine for Encryp and no Encryp
 232          //Eeprom Address = 0x3000 ~ 0x3FFF mapping XFR 0xE80 ~ 0xEFF
 233          // (rEER_ADDRH,rEER_ADDRL) = 0x0000 = Eeprom Addres 0x3000 ~ 0x307F mapping XFR 0xE80 ~ 0xEFF 
 234          // (rEER_ADDRH,rEER_ADDRL) = 0x0080 = Eeprom Addres 0x3080 ~ 0x30FF mapping XFR 0xE80 ~ 0xEFF 
 235          
 236          // (rEER_ADDRH,rEER_ADDRL) = 0x0F00 = Eeprom Addres 0x3F00 ~ 0x307F mapping XFR 0xE80 ~ 0xEFF 
 237          // (rEER_ADDRH,rEER_ADDRL) = 0x0F80 = Eeprom Addres 0x3F80 ~ 0x3FFF mapping XFR 0xE80 ~ 0xEFF
 238          //=========================================================
 239          
 240          
C51 COMPILER V9.56.0.0   MAIN                                                              12/17/2017 17:53:41 PAGE 5   

 241          *******************************************************************************
 242          
 243          */
 244          
 245          void Eep_Read(u16 Addr,u16 Num,u8 *buf)
 246          {
 247   1      
 248   1      BYTE  R5=0;
 249   1      WORD  wReadAddress;
 250   1      
 251   1      BYTE  bReadHiByteAddress;
 252   1      BYTE  bReadLowByteAddress;
 253   1      wReadAddress =Addr;
 254   1      
 255   1      
 256   1        for(R5=0;R5<Num;R5++)
 257   1        { 
 258   2            //Address 0x3000 ~ 0x3FFF
 259   2            bReadLowByteAddress = wReadAddress;
 260   2            bReadHiByteAddress = (wReadAddress/256) & 0x0F;
 261   2      
 262   2            rEER_ADDRL = bReadLowByteAddress;               //set EEPROM address  
 263   2            rEER_ADDRH = bReadHiByteAddress;
 264   2            *buf++ = FLASH_BASE[bReadLowByteAddress+R5];
 265   2          
 266   2              
 267   2        }
 268   1      
 269   1      
 270   1      
 271   1        
 272   1      }
 273          
 274          #define Bank14ADDRESS   0x3E00
 275          #define Bank14AddressLow    Bank14ADDRESS%256       
 276          #define Bank14AddressHigh   Bank14ADDRESS>>8
 277          
 278          void EraseFlash(void)
 279          {
 280   1        
 281   1        rEER_EN1=0x0A;        //;EEPROM enable data1: 0x0A
 282   1        rEER_EN2=0x05;        //EEPROM enable data2: 0x05
 283   1      
 284   1        rEER_ADDRL = Bank14AddressLow;
 285   1        rEER_ADDRH = Bank14AddressHigh;                   
 286   1      
 287   1        rEER_TCTL = ENABLE_ERASE + ERASE_TIMING;;
 288   1        rEER_EN1 = 0x00;                      //;EEPROM disable data1: 0x00
 289   1        rEER_EN2 = 0x00;                      //EEPROM disable data2: 0x00
 290   1      
 291   1        
 292   1      }
 293          
 294          
 295          
 296          uint8 code StrUserName[]  = UserName; //UserName;
 297          uint8 code StrVersion[]   = FWVersion;
 298          uint8 code StrRelease[]   = ReleaseDate;
 299          
 300          uint8 GetLenStrUserName(void)
 301          {
 302   1        return sizeof(StrUserName);
C51 COMPILER V9.56.0.0   MAIN                                                              12/17/2017 17:53:41 PAGE 6   

 303   1      }
 304          
 305          //  软件版本
 306          uint8 GetLenStrVersion(void)
 307          {
 308   1        return sizeof(StrVersion);
 309   1      }
 310          
 311          //  发行的日期
 312          uint8 GetLenStrRelease(void)
 313          {
 314   1        return sizeof(StrRelease);
 315   1      }
 316          
 317          
 318          
 319          
 320          static uint8 EepCheckInitFlag(void)
 321          {
 322   1        uint8  i,j,tmp,len;
 323   1        uint16 RomIdCheckSum,EepIdCheckSum;
 324   1      
 325   1        //  计算ROM中标记的校验码
 326   1        RomIdCheckSum = 0;
 327   1        len  = GetLenStrUserName();
 328   1        for (i = 0; i < len; i++) RomIdCheckSum += StrUserName[i];
 329   1        tmp = len;
 330   1      
 331   1        len   = GetLenStrVersion();
 332   1        for (i = 0; i < len; i++) RomIdCheckSum += StrVersion[i];
 333   1        tmp += len;
 334   1      
 335   1        len   = GetLenStrRelease();
 336   1        for (i = 0; i < len; i++) RomIdCheckSum += StrRelease[i];
 337   1        len = tmp + len;
 338   1      
 339   1      
 340   1        //  计算EEPROM中标记的校验码并和ROM中的校验码进行比较
 341   1        for (j = 0; j< 2; j++)  {             // 进行20次比较
 342   2          EepIdCheckSum = 0;                // 开始计算EEPROM中的校验码
 343   2          for (i = 0; i< len; i++) {
 344   3            Eep_Read(eepAdd_PRODUCTID + i, 1, &tmp);
 345   3            EepIdCheckSum += tmp;
 346   3            }
 347   2          
 348   2          if (RomIdCheckSum == EepIdCheckSum)  
 349   2            {
 350   3                Puts("\n\r EEPROM CHECK OK");
 351   3                return 1; // 标志已建立
 352   3            }
 353   2          }
 354   1      
 355   1        return  0;    //  如果20次比较都失效，那么确认标志未建立
 356   1      }
 357          
 358          static void EepSaveProductID(void)
 359          {
 360   1        uint16 Addr;
 361   1        uint8 len;
 362   1      
 363   1        Addr = eepAdd_PRODUCTID;
 364   1        len  = GetLenStrUserName();
C51 COMPILER V9.56.0.0   MAIN                                                              12/17/2017 17:53:41 PAGE 7   

 365   1        Eep_Write(Addr, len, StrUserName);
 366   1      
 367   1        Addr += len;
 368   1        len   = GetLenStrVersion();
 369   1        Eep_Write(Addr, len, StrVersion);
 370   1      
 371   1        Addr += len;
 372   1        len   = GetLenStrRelease();
 373   1        Eep_Write(Addr, len, StrRelease);
 374   1      }
 375          
 376          
 377          void EepInit(void)
 378          {
 379   1        ClearParAdjState();
 380   1      
 381   1        if (EepCheckInitFlag())  return;            // 标志已建立则退出
 382   1          
 383   1        // 初始化与显示模式无关的参数
 384   1        Eep_Write(eepAdd_SYSPAR, SIZE_SYSPAR, (uint8 *)&DEF_SYSPAR);
 385   1        Puts("\n\r EEPROM Data Over");
 386   1        // 初始化产品标示，每一次重新开机就会检查产品标示，如果成功就不会重新初始化eeprom
 387   1        EepSaveProductID();
 388   1      
 389   1      }
 390          
 391          
 392          void EepLoadAllPar(void)
 393          {
 394   1        
 395   1        Eep_Read(eepAdd_SYSPAR, SIZE_SYSPAR, (uint8 *)&SysPar); 
 396   1      #ifdef Debug_Eeprom
 397   1        Printf("SysPar.Brightness= %02bx\r\n",SysPar.Brightness);
 398   1        Printf("SysPar.Contrast= %02bx\r\n",SysPar.Contrast);
 399   1        Printf("SysPar.Backlight= %02bx\r\n",SysPar.Backlight);
 400   1        Printf("SysPar.Backlight= %02bx\r\n",SysPar.Flag);
 401   1        Printf("SysPar.Color= %02bx\r\n",SysPar.Color);
 402   1        Printf("SysPar.Sharp= %02bx\r\n",SysPar.Sharp);
 403   1        Printf("SysPar.Volume= %02bx\r\n",SysPar.Volume);
 404   1      #endif
 405   1      }
 406          
 407          void EepSavePar(void)
 408          {
 409   1        if(GetState_Brightness())
 410   1        {
 411   2      
 412   2          EraseFlash();
 413   2          Eep_Write(eepAdd_SYSPAR, SIZE_SYSPAR, (uint8 *)&SysPar);
 414   2          EepSaveProductID();
 415   2        
 416   2          Puts("\r\n save ok");
 417   2        
 418   2        }
 419   1        ClearParAdjState();
 420   1      }
 421          
 422          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1093    ----
C51 COMPILER V9.56.0.0   MAIN                                                              12/17/2017 17:53:41 PAGE 8   

   CONSTANT SIZE    =    335    ----
   XDATA SIZE       =      8      25
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     10    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
